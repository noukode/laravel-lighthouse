"A datetime string with format `Y-m-d H:i:s`, e.g. `2018-05-23 13:43:32`."
scalar DateTime @scalar(class: "Nuwave\\Lighthouse\\Schema\\Types\\Scalars\\DateTime")

"Indicates what fields are available at the top level of a query operation."
type Query {
    "Find a single user by an identifying attribute."
    user(
      "Search by primary key."
      id: ID @eq @rules(apply: ["prohibits:email", "required_without:email"])

      "Search by email address."
      email: String @eq @rules(apply: ["prohibits:id", "required_without:id", "email"])
    ): User @find

    "List multiple users."
    users(
      "Filters by name. Accepts SQL LIKE wildcards `%` and `_`."
      name: String @where(operator: "like")
    ): [User!]! @paginate(defaultCount: 5)

    "List multiple posts."
    posts(title: String @where(operator: "like")) : [Post!] @paginate(defaultCount: 5)
    "Find a single user by ID"
    post(id:Int! @eq):Post @find

}

type Mutation{
  "Mutation for create User"
  createUser(name: String!, email:String!, password:String! @hash): User! @create
  "Mutation for update User"
  updateUser(id: ID!, name: String, password:String @hash): User! @update
}

"Account of a person who utilizes this application."
type User {
    "Unique primary key."
    id: ID!

    "Non-unique name."
    name: String!

    "Unique email address."
    email: String!

    "Hashed Password"
    password: String!

    "When the email was verified."
    email_verified_at: DateTime

    "When the account was created."
    created_at: DateTime!

    "When the account was last updated."
    updated_at: DateTime!

    "Post has been created by User"
    posts: [Post!]! @hasMany
}

type Post{
    "Unique Primary Key"
    id: ID!

    "Post Title"
    title: String!

    "Post Content"
    content: String!

    "Author of the post"
    author: User! @belongsTo

    "Comments in the post"
    comments: [Comment!]! @hasMany
}

type Comment{
    "Unique Primary Key"
    id: ID!

    "Value of Comment"
    reply: String!

    "Origin The Comments"
    post: Post! @belongsTo
}
